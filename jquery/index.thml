<html>

<head></head>
<body>
</body>
<script>
$(function{
//処理 readyのたミングで
$('a');
//id
$('#name');
//class
$('.name');

$('a').text('hello');

$('a').length;
//Jquery は配列ではない
Array.isArray([]); //true
Array.isArray($()); //true

var j =$()
for (var key in j)
{
    console.log(key);
}

//HEADER 一覧
 $(":header").each(function (){
    console.log($(this).text() );
 
 });
    
});



//JQを読み込ませる方法
try `{
    $ = $ || jQuery; $().length; r();
} catch(e){
    var d  document , 0 = d.createElement("script");
        o.type = "text/javascript";
        0.src = "JQ CDN";
        d.body.appendChild(0);
}
function r(){
    console.log($());
}
$().click(function(){
    console.log("click");
});
//API
$().text();
$().html();
var text = $().attr("id");//IDnoataiwo 
$().text(text);
$().attr("align","right");//align にrightを追加する
$().text().css();//メソッドチェーン
$().test();
$().test();
var size =  $('#id span').css('fontsize');
$('#id').text(size).css('fontsize',size);
$('#id').text(size).css({'fontsize':size , 'color:   '});
#横断
　$(this).prev().text()
　$(this).next().text()
　//配列ではいる 下記書き方だと
　var html_ = $('<a href = "./url">'
　            + '<a>');
 console.log(html_[0])
 console.log(html_[1])
 
 .append() 選択した要素の直下の末尾に追加
 .prepend() 選択した要素の直下の先頭に追加
 .appendTo() 選択した引数の直下の末尾
 .prependTo()　選択した引数の直下の先頭
 例
 var $content = $<"dev">.text("[内容]");
 $([IDやくらす]).prepend($content);
 $("<div>").text("[内容]").prependTo([IDやクラス]);
//エフェクト
.hide()
.show()
.toggle()//("slow") とかできる

Ajax　//
$.ajax({
    url:"./○○.json "
    success:function(data){
        console.log(data)
    }
    });
Defferd // 
コールバック地獄対応のため Ajaxを複数回叩く必要な場合とかよう
var wait  = function(){
    var d = $.Deffered();
    // d.promise() 処理の予約
    // d.resolve() 処理を解決
    // d.reject() 処理を棄却
    
    setTimeout(fuction(){
        d.resolve();
    },500);
    
    return d.promise();
    });
$.ajax({
    url:"./○○.json "
        .then(function(date)
        {
         console.log(date);
        })
        .then(wait)
        .then(function(date)
        {
            return $ajax({url: "./test2"});
        })
        //.then(,)解決棄却時の処理
        //.done() 解決時の処理
        //.fail() 棄却時の処理など
    });
    
Defferd 並列
　$.when(～,～,...)  or 　$.when.apply($,配列)
　.done(function(){});
　例
　var arr = [
　 $ajax({url: "./text1.txt"}),
　 $ajax({url: "./text2.txt"}),
　 $ajax({url: "./text3.txt"}),
 ];
 $.when.apply($.arr)
 .done(function(){
 //時間差でしょりするので順番は保証されている
    for(var i =0; i < arguments.length; i++){//Ajaxは　argumentsでとれる！！
        var data = argument[i][0];
        (function(i,data){
            setTimeout(
                console.log(data);
            );
        })(i.data);
    }
    
//JQ プラグイン

    
    );
    
 });


jQuery.noConflict()
複数のJQバージョン利用や　ほかのJSで$がつかわれてる場合の対応
console.log($.fn.jQuery) //バージョンを知る
var mJq = JQuery.noConflict();
console.log($.fn.jQuery) //バージョンを知る
console.log(jQuery.fn.jQuery) //バージョンを知る
console.log(mJq.fn.jQuery) //バージョンを知る

//Selector CSSと同じ
$("要素")
$("#id")
$(".class")
$('[属性=""]'　　　属性　href title")
$('[属性=*""]')属性の値に指定した文字列を含む
$('[属性=~""]')スペース区切りされた属性の値の中に指定した値と一致するものを含む属性の値に指定した文字列を含む
$('[属性!="]')指定した属性を含まない　not([属性="値"])と等価
$('[属性$="]')属性の値が指定した文字列で終わる
$('[属性^="]')属性の値が指定した文字列で始まる
例
$('a[href^="https:"]')  a要素でhref属性が　httpsで始まる場合
//Selector位置
//N番目
$("p") P要素のすべてを取得
$("p:eq(0)") P要素全体の中で0番目の要素
$("p:gt(2)") P要素全体の中で2番目よりも大きな要素　gtの意味：greater than
$("p:lt(2)") P要素全体の中で2番目よりも小さな要素　lsの意味：less than
$("p:even") P要素全体の中で偶数 0 2 4
$("p:odd") P要素全体の中で奇数　1 3 5
$("p:first") P要素一番最初
$("p:first-child") 親が同一の要素の中で先頭がpの要素・・注意先頭が指定した要素でなければ選択できない。
$("p:first-of-type") 親が同一の要素の中で最初にでてくるP要素。
$("p:last") P要素一番最後末尾
$("p:last-child") 親が同一の要素の中で先頭がpの要素・・注意最後が指定した要素でなければ選択できない。
$("p:last-of-type") 親が同一の要素の中で最後にでてくるP要素。
$("p:nth-child(1)")  親が同一の要素の中でP要素全体の中で1番目の要素 注意　スタートは１
$("p:nth-child(even)")  親が同一の要素の中でP要素全体の中で偶数 1から数えて
$("p:nth-child(odd)")  親が同一の要素の中でP要素全体の中で奇数 1から数えて
$("p:nth-child(3n+1)")  親が同一の要素の中でP要素全体のの中で3の倍数+1　 1から数えて
$("p:nth-of-type(1)") 
$("p:nth-last-chile(1)") 末尾から一番目がpの要素
//後
$(".class名 + div")  同じ親要素でsec1クラスの直後にあるdiv 注意子は含まれない。
$(".class名 ~ div")  同じ親要素でsec1クラスの後に続くdiv 直後だけでなく後の全部選択できる
//子や孫
$("body div")  body内のすべてのDIV　子も孫もすべて
$("body > div")  body要素の子のdiv 子要素まで

//Form部品
$('input[type="text"]')
↓
$(":text")
$(":file")
$(":password")
$(":checkbox")
$(":radio")
$(":button")
$(":image")
$(":reset")
$(":submit")//ボタンの初期値はsubmitなのでtypeをbuttonにするなど対策すること
//Form部品小隊
$(":selected") //選択した項目を取得
//ラジオボタン
$(":checked") //チェックされた選択を取得できる
$(":checkbox:checked")
$("#id:checked")
$("input[name=group]:checked")
//状態
$(":focus") フォーカスされた状態を取得　選択しているFormを取得
setTimeout(function(){
    console.log($(":focus"));
},2000);
$(":visible") //表示されている情報を取得
$(":hidden") //非表示になってい情報を取得
$(":enabled") // 有効な要素選択
$(":disabled") //　無効な要素を選択
//中身の状態
$(":empty") 中身が空の要素を取得する
$("select:empty")
$(":parent")
$("select:parent")親要素を取得する
$(":contains(~)")子孫の要素に指定の文字れるを含む
$(":contains(1)")1という要素を含んでいる要素をすべて取得する。
$(":has(～)") 子孫に～が含まれている要素すべて取得
$(":has(input)") 子孫にinputが含まれている要素すべて取得
//否定
$(":not(～)") 
$("body:not(input)") 
$("body:not(input):empty") 
//ヘッダー要素を取得
$("header);
$("header).each(function(){
    console.log()
});
//JQ　横断（Traversing）　親子
//選択した要素を起点として　ほかの要素を選択する
//兄弟
ato .next() .nextAll() .nextUntil()
mae .prev() .prevAll() .prevUntil()
all .siblings()

$("#id").next("li")
$("#id").nextUntil(":cintauns(7)")７の前まで取得
//JQ　横断（Traversing）　その他

//子系
.children();一つ下の要素すべて　孫は取得しない
.contents();テキストノードを含んで取得
.find()　条件にいっちする子孫ノード取得

.children(:even); 子の偶数のあたいだけ

//親系
.parent() 一つ上
.parents() .全ての親要素
.parentsUntil(条件) 条件よりひとつまえまで取得
$("～").closest(条件) 自身から先祖要素に遡り最小に一致した要素を取得する
$("～").offsetParent() 先祖要素でposition が　relative absolute fixed のいずれかの要素を取得　//位置計算用　


//JQ　横断（Traversing) その他
//絞り込み
.filter(条件)　条件で絞り込む
.has(条件)　条件をもっているもののみ 
例
.filter(":has(ul)")
.filter(":lastChild")
.filter(functinon(i){
    console.log(i)log
    console.log($(this))
})
$("li").has("ul")
//番号指定系
.eq(番号)　番号の要素を取得する 
.first()一番最初
.last()ラスト
.slice(開始[,終了])　開始から終了の人る前までの要素を選択　終了省略時は末尾まで
.slice(-４, -2])　等も可能
//否定
$("～").not(".top") top以外の要素を取得
$("～").not(function(i){ return i % 3 == 0 }); 
//選択追加系
.add() 要素を追加する   
$(".nst2 li").add(".top"); class="top" を追加していく
addBack()　現在の要素に加え　一つまえの要素を追加
$("").～().addBadk()
$(".top").next().addBack(条件) ネクストとTOPの要素を取得する
//選択破棄
$("").～().end() 
$(".top").nextAll().css("color","red").end().css("color","blue")
//.nextAll()をはきした状態にして.css()をおこｋなう  

.each(function(i,e){}); i番号　e 要素時自身　$(this)
.map(function(i,e){}); i番号　e 要素時自身　$(this)  現在選択している要素にたいして処理をしてreturnでかえす。jQueryObjectなので注意  
.map(function(i,e){}).get().join("\n"); jQueryObjectなので注意 配列にしたいときはget()をつかう　get()ではいれつにしjoin(\n)で改行区切りにする。

.is(条件);条件にそっているかチェック
.is(":last-child");
例　0を押したとき

$("li").click(function(){
    var $this  $(this);
    if $(this.is(".[class]")){
        console.log("ok");
    }else{
        console.log("ng")
    }
});0;

//Event
//
$("").メソッド(function(){});
$("").click(function(){});
//準備完了  
ready
$(document).ready(function(){
});
は同じ
$(funciton(){
});
click
$().click()
$().dblclick()
例
var pClick = function (){ consoke.log("wclick");};
$("p").dblclick(pClick);

serialize
例
//
$(":radio").change(function(){
    var name = $(this).attr("name");
    var val = $(this).val();
    console.log(name,val);
});
$(":checkbox").change(function(){
    var name = $(this).attr("name");
    var isChecked = $(this).prok("checked");
    console.log(name,isChecked);
});
//submitはFormのID
$(#form).submit(function(){
    console.log(  $(this).serialize()  );/?get文になる
    console.log(  $(this).serializeArray()  );//配列になる　
    return false ; //イベントを止める
});
//リサイズ　スクロール
resize.  //Windowの横幅をかえると
$(window).resize(function(){
    var w = $(window).width();
    var h = $(window).height();
});
    
    //行数を増やす
    for(var i = 0; i<5;i++)
    {
        var p = $("p").clone();
        $("body").append(p);
    }
    //スクロールの処理
$(window).sctoll(function(){
    var top = $(window).scrollTop();
    console.log(top + "px");
});
//フォーカス系
.focus() されたとき
.blur()　外れたとき
.focusin() されたとき　子要素も
.focusout() 外れたとき　子要素も
例
$("#out, #tet2").focus(function(){
    var id = $(this).attr("id");
    console.log("focus", id);
    
});
$("#out, #tet2").focusin(function(e){
    var id = $(this).attr("id");
    //子要素など本当にForcusした部分にあてたいなら
    var idTrgt = $(e.target).attr("id");
    console.log("focusout",id,idTrgt);
    
//Event Key mouse
//ブラウザ依存が高く　日本語入力だとうかくいかない  
.keydown()
.keypress()
.keymouse()
.keyup()
function(e)
{
    e.altKey
    e.ctrlKey
    e.shiftkey

}
例 keydownとkeypressで値が違ったりする
$("#id").keydown(function(e){
    var c = String.fromCharCode(e.which)
    console.log("keydown",e.which,c);

});
$("#id").keyup(function(e){
    var c = String.fromCharCode(e.which)
    console.log("keyup",e.which,c);
});
//ホバー
.hover()
//例
$("#[id]").hover(function(){
        console.log("hover");
        //$(this).css("background","#fdd").val("hover");
    },function(){
        console.log("hoverout")
       //$(this).css("background","").val("");
    });
//マウス
.mousedown() //マウスぼたんのあげさせ
.mouseup()//マウスぼたんのあげさせ
.mouseenter(//まうすが　要素内に  対象要素のみ
.mouseleave()//まうすが　要素内に　対象要素のみ
.mouseover()//まうすが　要素内に　子要素も対象
.mouseout()//まうすが　要素内に　子要素も対象
.mousemove()//要素内でのマウスの移動　//とるタイミング考えないと重くなる

例
.mouseenter(function(e){
    console.log(e.target.id,"mouseenter");
}).mouseleave(function(e){
    console.log(e.target.id,"mouseleave");
});

イベントのバブリング
<html>
<body>
<div id="btnOut2" >
<div id="btnOut1" ></div>
</div>
</body>
</html>
<button id="btn">button</button>
$("*").click(function(){
    var tag =  this.tagName;
    var id  = this.id;
    console.log("click",tag,id);
    //結果は　btn btnOut1 btnOut2 body html 全部叩かれる　これをバブリングというらしい
    //ボタンの横をおすとbtnOut1　btnOut2 body html 全部叩かれる　これをバブリングというらしい
    return false //なので return false で一度目でとめる　バブリングさせないために
});
<button id="[id]">追加<button>
<ul>
    <li>項目</li>
</ul>
$("#[id]").on('click',function(){
    console.log(this);
    var li = $("li").clone();
    $("ul").append(li);
});
$("li").on('click',function(){
    console.log(this);
});
$("ul").on('click',function(){
    console.log(this);
});
//後から追加された要素だと　clikではみつけられない
//ulを監視し　クリックされたかとチェックし　クリックされた内容をひょうじするのは可能
//途中から増える場合は親要素から監視するようにする
//面倒ならBodyできめてうちする　$("body").on('click',function(){});など

//オフ　イベントの処理をとりのぞく
.off() //クリックイベントを削除する

//一回のみ　
.one() //ワンメソッド 各ボタンに一回ずつ
$(:button).one("click",function(){
//this.id
consolo.log($(this));
});

//イベント実行
.trigger()
.triggerHandler()



$("#[id]").click(function(){
    $("#[id2]").trigger("click);
    $("#[id2]").triggerHandler("click");//登録されたイベントのみ一回限り
});

//
//イベントオブジェクト
<div id="a">
    <button id="btn">push</button>
</div>
$("#[id]").click(function(e){
    //eの部分　イベントオブジェクトとは
    e.target //イベントが発生した要素 id=btnがある要素　buttonを取得
    e.currentTarget//イベントで対象になっている要素　thisと同じ　 id="a"がある要素　<div>
    e.delegateTarget
    e.relatedTarget
});
$("#[id]").on('click',"#a",function(e){
    //eの部分　イベントオブジェクトとは
    e.target //イベントが発生した要素 id=btnがある要素　buttonを取得
    e.currentTarget//イベントで対象になっている要素　thisと同じ　 id="a"がある要素　<div>
    e.delegateTarget //<body>をさす　イベントが設定された要素　イベントハンドラが指定した要素
    e.relatedTarget
});
$("#[id]").mouseout('click',"#a",function(e){
    e.relatedTarget //マウスが離れた　id=a 要素
});

//情報系
.type
.pageX
.pageY
.which
.timeStamp //バグがあるので基本つかわない。

$("#[id]").click(function(e){
//情報系
e.type イベントのタイプ　click
e.pageX　マウスのX座標
e.pageY　マウスのY座標
e.which　ボタンに紐図けられたキーコード  キーコードで検索　キーボードのどのボタンてきなやつ

//停止系
.prevendDefault()
.stopPropagation()
.stoplmmediatePropagation()
$("#[id]").click(function(e){
//通常実行される処理を阻止
e.prevendDefault()　　
//バブリングを阻止
e.stopPropagation()
//バブリング阻止　以降のイベントハンドラーも阻止　次のイベント前に止める
e.stopImmediatePropagation()

//イベントの受取方法
.data()
.result()
例
//({dt:1}でデータを渡せるらしい　e.dataの中に　return 部分は e.resultの中に
$().click({dt:1},function(e){
    console.log(this.id,e.data.e.result);
    return "send 1"
});
$().click({dt:2},function(e){
    console.log(this.id,e.data.e.result);
    return "send ２"
});
//バブリングした先では取得できない。
$().on("click",{dt:3},function(e){
    console.log(this.id,e.data.e.result);

});


//JQ 属性操作
.val() valueの値を取得する
.attr() .removeAttr() 属性id herfとか
.prop() .prop("checked", true) .removeprop JSで扱うHTMLElementオブジェクトのプロパティ　checked:truefalseでかえってくる　selected readonly disabled 等
注意　.removeprop 　HTMLがわで設定してあるデータは削除できない　初期化する的な使い方できそう

.addClass() クラスを追加する
.removeClass() クラスを削除する    
.toggleClass() onoff あればいれてなければけす　
.hasClass() false true クラスあかないかのチェック

//CSS
//取得
$text.css("color")//値の取得 
$text.css(["color","font-weight"])//値の取得 
//設定
$text.css("color","red")//設定
$text.css( {"color":"red",fontsize:"200%" })//設定  function(i){} もOK
//位置
.offset() ドキュメントを基準にしたい位置　左の位置から
.position()　オフセット要素基準　style css
.offset({top:20,left:20});
.offset(function(i,coords){ 
    return {top: coords.top + 10,
            left: coords.left + 10};
});

//スクロールの操作
style="overflow:scroll"
$(function(){
    var $win = $(window),id = null;
    $win.scroll(function(){
        if (id != null) clearTimeout(id);//100いないのは削除
        id = setTimeout(funciton(){
            id = null;
            //位置を出力
            console.log($win.scrollLeft(),$win.scrollTop);
            //位置を戻す   2秒後に戻す
            setTimeout(function(){
                $win.scrollLeft(0).scrollTop(0);
            },2000);    
        },100);
    });
})



//JQ Dimensions 縦横サイズ
.width()
.height()
.innerWidth()
.innerHeight()
.outerWidth()
.outerHeight()
.outerHeight(true)
.width(300)
.width(function(i){return i * 100 + 100})

//詳細　Data
//カスタムデータ属性
<  data-* data-form="My" 等>
.data();HTMLは書き換わらない　JQプログラムないで保持しておく仕組み　注意
//バブリングした先では取得できない。
$().on("click",function(e){
var $t =$(this);
console.log($t.data("form"));
$t.data("form",$t.data("form") + 1 );
console.log($t.data("form"));
$t.removeData("form");
console.log($t.data("form"));

//
//Maniputlation 要素の追加削除など 後回し
remove().appentTo("ul:eq(0)) だと削除されてるのでクリックできない
detach().appentTo("ul:eq(0)) データをほじしたまま削除　だとクリックできる
.clone()//クローンなので　イベントの処理は発生しない 
.replaceWith()
.replaceAll()
.wrap()//ラップ　<div></div>とかつつむように追加できる

//EFFects  これも詳細は来週
.hide([Duration 継続時間][,Easing緩和linear swing　JQUIプラグインで追加可能][,Callback終了後のする内容])
.fadeIn .fadeOut fadeTo
.slideUp()
.animate()
$.fx.interval = 5000
$.fx.off  = true

Ajax　詳細も来週
セキュリティ　ローカル無理　ファイルサーバ上 //JQUI
//JS読み込み
$getScript("  .js").done(function(d){console.log(d)});
$("div").load("message.html"); ○○を挿入する　・・これつかえそう

Defferd
$.extend()
複数のオブジェクトをマージ
$.extend(a_array,b_array)
var ee = $.extend({},a_array,b_array) マージするが前の値はかえないようにする


});











    




);

//受取系


});








    
});














//中身の状態






</script>
</html>

