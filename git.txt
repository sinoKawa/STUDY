git study


git init ：.gitが作成される
git config 


#VIMにする
git config --global core.editor 'vim -c "set fenc=utf-8"'
ls -a
ls .git
objects の中にいろいろはいってくる
config gitの設定

その他.gitignore除外ルールなどを設定する 

git add
git commit -m
git commit -v 
test


#変更差分の確認    ：
git diff
git diff --staged #add後はこちら


#gitにアップする
git push
git push orijin master

git log
#一行で表示する
git log --oneline
#　ファイルの変更差分を表示する
git log -p index.html
#　表示するコミットを制限する
git log -
例
git log -p -n 1


#ファイル事削除
git rm 
git rm -r ディレクトリ
gti rm --cached ファイル名　
「必要だがGitにはのこしておきたくない情報につかう　PWなど」

#もとにもどすなら
git reset HEAD
#復活するなら
#git chaeckout HEAD 

#ファイルの移動を記録
git mv nowtxt newtxt
または
mv  oldtxt newtxt
git rm  oldtxt
git add newtxt

#git にアップ
git remote add origin https://github.com/sinoKawa/STUDY.git originというショートカットでURLのリモードリポジトリを登録する
git push -u origin master  //-u をつけると次回以降 git push でも masterに送るようになる
アップできない場合
Everything up-to-date　となっているのにアップできない
git remote -v
git push origin master:master
git push ssh://git@github.com/◯◯◯.git master:master
    gitpull がrejectされた場合
    「pdates were rejected because the tip of your current branch is behind」


#git コマンドにエイリアスを付けよう
コマンドの入力を短縮して入力を楽にしよう
git config --global alias.ci commit
git config --global alias.st status
git congit fig --global alias.br branch
git config --global alias.co checkout
git config --global core.editor 'vim -c "set fenc=utf-8"'

~/.gitconfig
~/.config/git/config #globalをつけるとPC全体の設定になるよ



#git バージョン管理しないファイルは無視しよう
.gitignoreファイルに指定する
「
# comment
#とすると除外される
index.html
/index.html
dir/
#一つもどった階層のCSS除外
/*/*.css



」

#取り消し
git checkout  -- ファイル名　ディレクトリー名
#stagedの時の取り消し
git reset HEAD ふぃあるめい
#全て変更とりけし   
git reset HEAD
#直前のコミットをやり直す
git commit --amend
# -a

#リモートを表示する
git remote 
git remote  -v#URLなら
url (fetch)
url (push)
##バックアップ用のリポジトリを作成後
git remote add  bak URL https
git push -u bak master #bak用のリポジトリを更新する。
##リモートから取得する　フェッチ
二種類　
fetch
pull

git fetch <リモート名>
git fetch origin 
→　リモートリポジトリ→ローカルリモジトリに移動する　　ローカルのワークツリーにはこない
→　ローカルワークツリーに持ってくるには 　git marge
git branch -a  //aはALL
##git checkout remotes/origin/master 　 ##中身を確認
##git checkout master
git merge remotes/origin/master #git branch -a ならremotes/origin/master


