git study


git init ：.gitが作成される
git config 


#VIMにする
git config --global core.editor 'vim -c "set fenc=utf-8"'

#ファストフォワードさせない
git config --global merge.ff false 
#master ブランチで　git pullするときだけ　gitpullリベース型にする
git config branch.master.rebase true

ls -a
ls .git
objects の中にいろいろはいってくる
config gitの設定

その他.gitignore除外ルールなどを設定する 

git add
git commit -m
git commit -v 
test


#変更差分の確認    ：
git diff
git diff --staged #add後はこちら


#gitにアップする
git push
git push orijin master

git log
#一行で表示する
git log --oneline
#　ファイルの変更差分を表示する
git log -p index.html
#　表示するコミットを制限する
git log -
例
git log -p -n 1


#ファイル事削除
git rm 
git rm -r ディレクトリ
gti rm --cached ファイル名　
「必要だがGitにはのこしておきたくない情報につかう　PWなど」

#もとにもどすなら
git reset HEAD
#復活するなら
#git chaeckout HEAD 

#ファイルの移動を記録
git mv nowtxt newtxt
または
mv  oldtxt newtxt
git rm  oldtxt
git add newtxt

#git にアップ
git remote add origin https://github.com/sinoKawa/STUDY.git originというショートカットでURLのリモードリポジトリを登録する
git push -u origin master  //-u をつけると次回以降 git push でも masterに送るようになる
アップできない場合
Everything up-to-date　となっているのにアップできない
git remote -v
git push origin master:master
git push ssh://git@github.com/◯◯◯.git master:master
    gitpull がrejectされた場合
    「pdates were rejected because the tip of your current branch is behind」


#git コマンドにエイリアスを付けよう
コマンドの入力を短縮して入力を楽にしよう
git config --global alias.ci commit
git config --global alias.st status
git congit fig --global alias.br branch
git config --global alias.co checkout
git config --global core.editor 'vim -c "set fenc=utf-8"'

~/.gitconfig
~/.config/git/config #globalをつけるとPC全体の設定になるよ



#git バージョン管理しないファイルは無視しよう
.gitignoreファイルに指定する
「
# comment
#とすると除外される
index.html
/index.html
dir/
#一つもどった階層のCSS除外
/*/*.css



」

#取り消し
git checkout  -- ファイル名　ディレクトリー名
#stagedの時の取り消し
git reset HEAD ふぃあるめい
#全て変更とりけし   
git reset HEAD
#直前のコミットをやり直す
git commit --amend
# -a

#リモートを表示する
git remote 
git remote  -v#URLなら
url (fetch)
url (push)
##バックアップ用のリポジトリを作成後
git remote add  bak URL https
git push -u bak master #bak用のリポジトリを更新する。
##リモートから取得する　フェッチ
二種類　
fetch
pull

#情報取得
git fetch <リモート名>
git fetch origin 
→　リモートリポジトリ→ローカルリモジトリに移動する　　ローカルのワークツリーにはこない
→　ローカルワークツリーに持ってくるには 　git marge
git branch -a  //aはALL
##git checkout remotes/origin/master 　 ##中身を確認
##git checkout master
git merge remotes/origin/master #git branch -a ならremotes/origin/master

"上記を一気にしたいなら　
git pull <リモート名><ブランチ名>
git pull origin master 
##プルの注意点　別のブランチにいた場合　統合されてしまう。超危険,理解するまではfetch


#リモートの詳細
git remote show 
git remote origin
#リモートの変更削除
git remote rename A B
git rm A


#ブランチ　と　マージ
##ブランチの作成
git branch ブランチ名
git branch feature 
注意　ブランチは作るけど　切り替えはしないよ
ブランチ一覧
git branch -a
git branch 今のブランチ
git log --oneline --decorate #どのブランチがどのコミットをさしてるか確認したい
##ブランチに移動
git checkout <既存ブランチ>

git checkout -bgit  <新ブランチ>
#変更履歴をマージする
git merge <ブランチ名>
git merge <リモート名・ブランチ名>
git merge origin/master
##マージには3種類ある
Fast Foward 早送りになるマージ
　master →　　hotfixブランチ作成→ git marge hotfix
　 git log  --oneline 確認
Auto Merge 基本的な魔0時
   master　　git merge freature
    ↓
commmit
    ↑
　feature

   master　←　 master　　
    ↓　　　　　　↓
commmit　　　　　↓
    ↑　　　　　　↓
　feature　←←←←←←←　
Conflect Merge

##コンフリクト対策
複数人で同じファイルをさわらない
pullやMergeする前に変更中の状態をなくしておく　commit stash
pullするときは　pullするブランチに移動してからpullsuru


##ブランチの変更削除
git branch -m <ブランチ名>　ブランチ名を<ブランチ名>に変更する　-m＝move
git branch -d <ブランチ名>  削除する
強制削除
git branch -D <ブランチ名> 変更があっても強制的に削除

##ブランチを利用した開発の流れ
githubフローとかあれ

##リモートブランチって何
リモートブランチのポインター

リモートリポジトリ　　マスター
　　　　　　　　　　　featurebranch
.............................
ローカル　master     　　　　 
          topic         　　
↓
リモートリポジトリ　　マスター
　　　　　　　　　　　featurebranch
..............................git fetch するとリモートができる
ローカル　master     　　　　   origin/master　
          topic                 topic
          feature               origin/feature
       
#githubを利用した開発手順のながれ　
##プルリクエスト

１　マスターを最新にする git branch    git pull origin master
２　ブランチを作成する git branch pull_request   git checkout pull_request  
３　ファイルを変更   
４　変更をコミット
５　githubへプッシュ
６　プルリクエストを送る
７　コードレビュー
８　プルリクエストをマージ




##github Flowの流れ
##Github Flowを実践しよう


##その他  
git branch -D master //マスターを削除
git fetch 
git branch master origin/master

相手が作成したbranchが見えない時
git branch -r
git fetch origin
#リモートを取得
git branch -a
remotes/origin/pull
なら
git checkout -b pull_ remotes/origin/pull　
$ git checkout -b ローカルでのブランチ名 チェックアウトするブランチ名

 git push origin :dev  

ブランチ　　git push origin[サーバ名]　[branch名] 
          
          
##大切なこと
pushされてはじめてgithubに反映される。
pullされてはじめてgithub上にマージされる　

#rebease 
git checkout frature
git rebase master
git checkout master
git merge feature


##pull 
git pull --rebase orgin master //マージ情報を残さない　
pull の　git fetch git marge 　でなく git fetch git rebase //github上に情報をのこさない　単純に最新をおとしたい場合
test
test


#直前のコミットをやめる　
git commit --amand 
#複数のコミットをやり直す　

＃＃コメントを変更
git rebase -i コミットID
git rebase -i HEAD~3 # -i はinteractive の意味 3つ表示する　HEAD^3 親から3番
pick →　edit コミットID
git commit --amend
次のコミットへ進む
git rebase --continue
##コミットをまとめる
git rebase -i HEAD~3 #
pick →　squash
##commit を　分割する
git rebase -i HEAD~3 #
pick →　edit
git reset HEAD^
git add README
git commit -m 'READMEedit'
git add index.html
git commmit -m 'index.htmledit2'
git rebase --continue


無駄メモ　チルダ　 ~ 　キャレット ^




